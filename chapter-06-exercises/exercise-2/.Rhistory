?substr
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e<-gsub("a", "ee"", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits_e <- gsub("a", "ee"", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_0 <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- (intro, fruits_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
print.by(fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste0(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
(paste(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o,)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o,))
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o,))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste("hi",intro, fruits_o,))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste("hi",intro, fruits_o,))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, fruits_o,)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(c(intro, fruits_o,)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
sprint(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
sprintf(intro, fruits_o)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
sprintf(intro, fruits_o)
print(ten)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {}
return(number +3)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
print(ten)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
return(number + 3)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
return(number + 3)
}
print(ten)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
print(ten)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12*numbfeet + numbinch)
return( .0254*total_inch)
total_inch <- (12*numbfeet + numbinch)
total_inch <- (12 * numbfeet + numbinch)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12 * numbfeet + numbinch)
return( .0254*total_inch)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12 * numbfeet + numbinch)
total_inch <- (12 * numbfeet + numbinch)
source('~/Desktop/INFO 201/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
source('~/Desktop/INFO 201/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
debugSource('~/Desktop/INFO 201/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
return(number + 3)
}
return(number + 3)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number) {
return(number + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
print(ten)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12 * numbfeet + numbinch)
return( .0254*total_inch)
return( .0254 * total_inch)
total_inch <- (12 * numbfeet + numbinch)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12 * numbfeet + numbinch)
return( .0254 * total_inch)
total_inch <- (12 * numbfeet + numbinch)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch)
total_inch <- (12 * numbfeet + numbinch)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(numbfeet, numbinch) {
total_inch <- (12 * numbfeet + numbinch)
return( .0254 * total_inch)
}
imperial_to_metric(height_in_meters)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- (5 , 9)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- (5, 9)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- (5, 9)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- (5 9)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,9)
print(height_in_meters)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c(Dhandeep, Richard,)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c(Dhandeep, Richard)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
print(add1)
# Add 1 to each element in `n` and print the result
add1 <- n + 1
print(add1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10:1)
print(m)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(1:10)
print(m)
print(m)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
print(m)
# Subtract `m` FROM `n`. Note the recycling!
print( n - m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,.1)
print(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
move <- ((sin_wave)*(cos_wave) + sin_wave)
# Use the `plot()` function to plot your `wave`!
plot(move)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
print(first_ten)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(21:30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten + next_ten)
print(all_numbers)
print(eleventh)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
print(eleventh)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
print(some_numbers)
# Create a vector `even` that holds the even numbers from 1 to 100
hundered <- c(1:100)
evenly <- hundred/2 == 0
evenly <- hundred / 2 == 0
# Create a vector `even` that holds the even numbers from 1 to 100
hundred <- c(1:100)
evenly <- hundred / 2 == 0
even <- hundred[evenly]
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?%%
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
?all
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8,6,7,5,3,0,9)
print(prefix)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <-c(phone_numbers[1:3])
print(prefix)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_numbers <= 5)
print(small)
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 9
fav_2 <- 25
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
row_sum <- sum(fav_1, fav_2)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
row_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round)fav_2)
round_2 <- round{fav_2)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
fav_2 <- fav_2 / sqrt(201)
round_2 <- round{fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
round_2 <- round(fav_2)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
